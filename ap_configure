#!/bin/bash

TEMP_INPUT=$(mktemp)
COMMON_PASSWORDS=("password" "12345678" "qwertyui" "letmein123" "admin123")
HOSTAPD_CONF="/etc/hostapd/hostapd.conf"
FILTER_TABLE="inet filter"

msg_box() { dialog --title "$1" --msgbox "$2" 10 60; }
input_box() { dialog --inputbox "$1" 8 60 "$2" 2>"$TEMP_INPUT"; }
menu_box() { dialog --menu "$1" 15 60 5 "${@:2}" 2>"$TEMP_INPUT"; }
checklist_box() { dialog --checklist "$1" 20 70 10 "${@:2}" 2>"$TEMP_INPUT"; }

validate_cidr() {
  [[ "$1" =~ ^([0-9]{1,3}\.){3}[0-9]{1,3}/[0-9]{1,2}$ ]]
}

is_host_ip() {
  ipcalc -c "$1" >/dev/null 2>&1
}

get_supported_bands() {
  mapfile -t SUPPORTED_FREQS < <(iw list | awk '/^\s+\* [0-9]+/ {print $2}')
  SUPPORTED_BANDS=()
  for freq in "${SUPPORTED_FREQS[@]}"; do
    freq_int=${freq%%.*}
    (( freq_int >= 2400 && freq_int <= 2500 )) && SUPPORTED_BANDS+=("2.4")
    (( freq_int >= 5000 && freq_int <= 6000 )) && SUPPORTED_BANDS+=("5")
    (( freq_int >= 5925 )) && SUPPORTED_BANDS+=("6")
  done
  SUPPORTED_BANDS=($(printf "%s\n" "${SUPPORTED_BANDS[@]}" | sort -u))
}

get_supported_channel_widths() {
  mapfile -t CAPABILITIES < <(iw list | awk '/Capabilities:/,/^$/')
  SUPPORTED_WIDTHS=()
  for cap in "${CAPABILITIES[@]}"; do
    [[ "$cap" =~ HT20 ]] && SUPPORTED_WIDTHS+=("20")
    [[ "$cap" =~ HT40 ]] && SUPPORTED_WIDTHS+=("40")
    [[ "$cap" =~ VHT80 ]] && SUPPORTED_WIDTHS+=("80")
    [[ "$cap" =~ VHT160|HE160 ]] && SUPPORTED_WIDTHS+=("160")
    [[ "$cap" =~ HE80 ]] && SUPPORTED_WIDTHS+=("80")
  done
  SUPPORTED_WIDTHS=($(printf "%s\n" "${SUPPORTED_WIDTHS[@]}" | sort -u))
}

detect_band_congestion() {
  mapfile -t SCAN_FREQS < <(iw dev "$WIFI_IFACE" scan 2>/dev/null | awk '/freq:/ {print $2}')
  NUM_24=0; NUM_5=0; NUM_6=0
  for f in "${SCAN_FREQS[@]}"; do
    f_int=${f%%.*}
    (( f_int >= 2400 && f_int <= 2500 )) && ((NUM_24++))
    (( f_int >= 5000 && f_int <= 6000 )) && ((NUM_5++))
    (( f_int >= 5925 )) && ((NUM_6++))
  done
  CONGESTION_MSG="Visible APs:\n- 2.4 GHz: $NUM_24\n- 5 GHz: $NUM_5\n- 6 GHz: $NUM_6"
}

WIFI_IFACE=$(iw dev | awk '/Interface/ {print $2}' | head -n 1)
[[ -z "$WIFI_IFACE" ]] && msg_box "No Wi-Fi Interface" "No wireless interface found." && exit 1

WIFI_CHIPSET=$(lspci -nnk | grep -A2 Network | grep -i atheros)
IS_AR93XX=0
if [[ "$WIFI_CHIPSET" =~ AR93 ]]; then
  IS_AR93XX=1
  msg_box "Detected Chipset" "Atheros AR93xx detected â€” applying optimized config."
fi


INSIDE_IFACE=$(nmcli -t -f DEVICE,NAME connection show --active | awk -F: '$2 ~ /-inside$/ {print $1}' | head -n 1)
OUTSIDE_IFACE=$(nmcli -t -f DEVICE,NAME connection show --active | awk -F: '$2 ~ /-outside$/ {print $1}' | head -n 1)

get_supported_bands
get_supported_channel_widths
detect_band_congestion
msg_box "Band Congestion Info" "$CONGESTION_MSG"

chipset_info=$(lshw -class network 2>/dev/null | awk '/Wireless interface/,/^$/')
band_list=$(IFS=','; echo "${SUPPORTED_BANDS[*]}")
width_list=$(IFS=','; echo "${SUPPORTED_WIDTHS[*]}")
msg_box "Wi-Fi Chipset Info" "Detected chipset:\n\n$chipset_info\nSupported Bands: $band_list GHz\nChannel Widths: $width_list MHz"

if [[ "$IS_AR93XX" -eq 1 ]]; then
  CHANNEL=6
  HOSTAPD_HW_MODE="g"
else
  get_supported_bands
  get_supported_channel_widths
  detect_band_congestion
  msg_box "Band Congestion Info" "$CONGESTION_MSG"

  band_list=$(IFS=','; echo "${SUPPORTED_BANDS[*]}")
  width_list=$(IFS=','; echo "${SUPPORTED_WIDTHS[*]}")
  msg_box "Wi-Fi Chipset Info" "Detected chipset:\n\n$chipset_info\nSupported Bands: $band_list GHz\nChannel Widths: $width_list MHz"

  width_options=()
  [[ " ${SUPPORTED_WIDTHS[*]} " =~ " 20 " ]] && width_options+=("1" "20 MHz")
  [[ " ${SUPPORTED_WIDTHS[*]} " =~ " 40 " ]] && width_options+=("2" "40 MHz")
  [[ " ${SUPPORTED_WIDTHS[*]} " =~ " 80 " ]] && width_options+=("3" "80 MHz")
  [[ " ${SUPPORTED_WIDTHS[*]} " =~ " 160 " ]] && width_options+=("4" "160 MHz")
  [[ ${#width_options[@]} -eq 0 ]] && msg_box "Error" "No supported channel widths detected!" && exit 1

  menu_box "Select Channel Width:" "${width_options[@]}"
  WIDTH_CHOICE=$(<"$TEMP_INPUT")
  case "$WIDTH_CHOICE" in
    1) CHANNEL_WIDTH="20" ;;
    2) CHANNEL_WIDTH="40" ;;
    3) CHANNEL_WIDTH="80" ;;
    4) CHANNEL_WIDTH="160" ;;
    *) msg_box "Invalid Selection" "Defaulting to 20 MHz."; CHANNEL_WIDTH="20" ;;
  esac

  CHANNEL=36
  HOSTAPD_HW_MODE="a"
fi


: > "$HOSTAPD_CONF"  # Clear hostapd.conf before writing

echo "channel=$CHANNEL" >> "$HOSTAPD_CONF"

case "$CHANNEL_WIDTH" in
  20)
    echo "ht_capab=[HT20]" >> "$HOSTAPD_CONF"
    ;;
  40)
    echo "ht_capab=[HT40+]" >> "$HOSTAPD_CONF"
    echo "vht_oper_chwidth=0" >> "$HOSTAPD_CONF"
    echo "vht_oper_centr_freq_seg0_idx=$((CHANNEL + 2))" >> "$HOSTAPD_CONF"
    ;;
  80)
    echo "ht_capab=[HT40+]" >> "$HOSTAPD_CONF"
    echo "vht_oper_chwidth=1" >> "$HOSTAPD_CONF"
    echo "vht_oper_centr_freq_seg0_idx=$((CHANNEL + 6))" >> "$HOSTAPD_CONF"
    ;;
  160)
    echo "ht_capab=[HT40+]" >> "$HOSTAPD_CONF"
    echo "vht_oper_chwidth=2" >> "$HOSTAPD_CONF"
    echo "vht_oper_centr_freq_seg0_idx=$((CHANNEL + 14))" >> "$HOSTAPD_CONF"
    ;;
esac

# VLAN and bridge creation, SSID, PSK, nftables configuration continue below...

# (You can now append VLAN + bridge creation, nmcli setup, hostapd config, nft INPUT and FORWARD rules, etc. as discussed.)

while true; do
  input_box "Enter VLAN ID for Wi-Fi (e.g., 70):" "70"
  VLAN_ID=$(<"$TEMP_INPUT")
  VLAN_DEV="${INSIDE_IFACE}.${VLAN_ID}"
  BRIDGE_NAME="br-wifi${VLAN_ID}"
  nmcli device status | grep -q "$VLAN_DEV" && \
    msg_box "VLAN Exists" "VLAN $VLAN_ID already exists on $INSIDE_IFACE." && continue
  break
done

input_box "Enter SSID:" "RFWB-WIFI"
SSID=$(<"$TEMP_INPUT")

menu_box "Select WPA Mode:" 2 "WPA2" 3 "WPA3"
WPA_MODE=$(<"$TEMP_INPUT")

while true; do
  input_box "Enter Wi-Fi password (min 8 chars):" ""
  PSK=$(<"$TEMP_INPUT")
  [[ ${#PSK} -lt 8 ]] && msg_box "Invalid" "Password too short." && continue
  for p in "${COMMON_PASSWORDS[@]}"; do [[ "$PSK" == "$p" ]] && msg_box "Weak Password" "Choose a stronger password." && continue 2; done
  break
done

while true; do
  input_box "Enter static IP in CIDR (e.g. 192.168.${VLAN_ID}.1/24):" "192.168.${VLAN_ID}.1/24"
  CIDR=$(<"$TEMP_INPUT")
  validate_cidr "$CIDR" || { msg_box "Invalid" "CIDR format invalid."; continue; }
  is_host_ip "$CIDR" || { msg_box "Invalid" "Not a valid host IP."; continue; }
  SUBNET=$(ipcalc -n "$CIDR" | awk -F= '/NETWORK/ {print $2}')
  ip -4 addr | grep -q "$SUBNET" && msg_box "Conflict" "That subnet overlaps." && continue
  break
done

declare -A iface_cidrs iface_names
mapfile -t ALL_INTERFACES < <(nmcli -t -f DEVICE,CONNECTION device status | awk -F: '!/lo/ && NF==2 {print $1}')

for iface in "${ALL_INTERFACES[@]}"; do
  cidr=$(nmcli -g IP4.ADDRESS device show "$iface" | grep '/' | cut -d' ' -f1 || true)
  [[ -n "$cidr" ]] && {
    iface_names["$iface"]="$iface ($cidr)"
    iface_cidrs["$iface"]="$cidr"
  }
done

menu_items=( "None" "Skip Internet & internal access" off )
for i in "${!iface_cidrs[@]}"; do
  [[ "$i" != "$BRIDGE_NAME" ]] && menu_items+=("$i" "${iface_names[$i]}" off)
done

exec 3>&1
selected=$(dialog --checklist "Allow Wi-Fi ($CIDR) to access:" 20 70 10 "${menu_items[@]}" 2>&1 1>&3)
exec 3>&-
IFS=' ' read -r -a mappings <<< "$selected"

nmcli connection delete "$BRIDGE_NAME" &>/dev/null || true
nmcli connection delete "wifi-vlan${VLAN_ID}" &>/dev/null || true
nmcli connection delete "wifi-vlan${VLAN_ID}-slave" &>/dev/null || true
nmcli connection delete "wifi-phy-slave${VLAN_ID}" &>/dev/null || true

nmcli connection add type bridge con-name "$BRIDGE_NAME" ifname "$BRIDGE_NAME" ipv4.method manual ipv4.addresses "$CIDR" ipv4.never-default yes autoconnect yes
nmcli connection add type vlan con-name "wifi-vlan${VLAN_ID}" dev "$INSIDE_IFACE" id "$VLAN_ID" ipv4.method disabled autoconnect yes
nmcli connection add type bridge-slave con-name "wifi-vlan${VLAN_ID}-slave" ifname "$VLAN_DEV" master "$BRIDGE_NAME"
nmcli connection add type bridge-slave con-name "wifi-phy-slave${VLAN_ID}" ifname "$WIFI_IFACE" master "$BRIDGE_NAME"
nmcli connection up "$BRIDGE_NAME"

mkdir -p /etc/hostapd
cat <<EOF > "$HOSTAPD_CONF"
interface=$WIFI_IFACE
bridge=$BRIDGE_NAME
driver=nl80211
ssid=$SSID
hw_mode=$HOSTAPD_HW_MODE
channel=$CHANNEL
auth_algs=1
wpa=$WPA_MODE
wpa_key_mgmt=WPA-PSK
rsn_pairwise=CCMP
wpa_passphrase=$PSK
country_code=US
EOF

if [[ "$IS_AR93XX" -eq 1 ]]; then
  # Special hostapd settings for Atheros AR93xx
  cat <<EOF >> "$HOSTAPD_CONF"
ieee80211n=1
ht_capab=[HT40+][SHORT-GI-40][SHORT-GI-20][RX-STBC1][TX-STBC]
require_ht=1 # Require 802.11n clients only; disables legacy b/g
EOF
else
  case "$CHANNEL_WIDTH" in
    20)
      echo "ht_capab=[HT20]" >> "$HOSTAPD_CONF"
      ;;
    40)
      echo "ht_capab=[HT40+]" >> "$HOSTAPD_CONF"
      echo "vht_oper_chwidth=0" >> "$HOSTAPD_CONF"
      echo "vht_oper_centr_freq_seg0_idx=$((CHANNEL + 2))" >> "$HOSTAPD_CONF"
      ;;
    80)
      echo "ht_capab=[HT40+]" >> "$HOSTAPD_CONF"
      echo "vht_oper_chwidth=1" >> "$HOSTAPD_CONF"
      echo "vht_oper_centr_freq_seg0_idx=$((CHANNEL + 6))" >> "$HOSTAPD_CONF"
      ;;
    160)
      echo "ht_capab=[HT40+]" >> "$HOSTAPD_CONF"
      echo "vht_oper_chwidth=2" >> "$HOSTAPD_CONF"
      echo "vht_oper_centr_freq_seg0_idx=$((CHANNEL + 14))" >> "$HOSTAPD_CONF"
      ;;
  esac
fi


systemctl enable hostapd
systemctl daemon-reexec
systemctl restart hostapd

# Get the handle for the final drop rule in input chain
# INPUT chain: allow DNS, DHCP, NTP on BRIDGE
drop_handle=$(nft --handle list chain $FILTER_TABLE input | grep -F 'log prefix "INPUT DROP: "' | awk '{for (i=1;i<=NF;i++) if ($i=="handle") print $(i+1)}')

if [[ -n "$drop_handle" ]]; then
  nft insert rule $FILTER_TABLE input handle "$drop_handle" iifname "$BRIDGE_NAME" udp dport 67 accept comment '"Wi-Fi DHCPv4"'
  nft insert rule $FILTER_TABLE input handle "$drop_handle" iifname "$BRIDGE_NAME" udp dport 53 accept comment '"Wi-Fi DNSv4 UDP"'
  nft insert rule $FILTER_TABLE input handle "$drop_handle" iifname "$BRIDGE_NAME" tcp dport 53 accept comment '"Wi-Fi DNSv4 TCP"'
  nft insert rule $FILTER_TABLE input handle "$drop_handle" iifname "$BRIDGE_NAME" udp dport 123 accept comment '"Wi-Fi NTP"'
else
  msg_box "Warning" "Could not insert before DROP rule. Manual nftables fix needed."
fi

# === Debug output to verify mappings and CIDRs ===
debug_msg=""
debug_msg+="Selected mappings:\n"
for tgt in "${mappings[@]}"; do
  debug_msg+="$tgt --> ${iface_cidrs[$tgt]}\n"
done
msg_box "Debug: Wi-Fi Mapping" "$debug_msg"

LOG_FILE="/tmp/wifi_nft_debug.log"
: > "$LOG_FILE"  # Clear old log

for tgt in "${mappings[@]}"; do
  tgt_cidr="${iface_cidrs[$tgt]}"
  [[ -z "$tgt_cidr" ]] && {
    echo "[ERROR] Missing CIDR for $tgt" >> "$LOG_FILE"
    msg_box "Error" "Missing CIDR for target interface $tgt."
    continue
  }

if [[ "$tgt" == "$OUTSIDE_IFACE" ]]; then
  if ! nft add rule $FILTER_TABLE forward_internet ip saddr "$CIDR" iifname "$BRIDGE_NAME" oifname "$OUTSIDE_IFACE" accept comment "\"Wi-Fi Auto Rule\"" 2>>"$LOG_FILE"; then
    msg_box "Error" "Failed to add forward_internet rule (see $LOG_FILE)"
  fi
else
  jump_line=$(nft --handle list chain $FILTER_TABLE forward | grep 'jump forward_internet' | tail -n1)
  jump_handle=$(awk '{for (i=1;i<=NF;i++) if ($i=="handle") print $(i+1)}' <<< "$jump_line")

  echo "[DEBUG] forward_internet jump line: $jump_line" >> "$LOG_FILE"
  echo "[DEBUG] forward_internet jump handle: $jump_handle" >> "$LOG_FILE"

  if [[ -n "$jump_handle" ]]; then
    if ! nft insert rule $FILTER_TABLE forward handle "$jump_handle" \
      ip saddr "$CIDR" ip daddr "$tgt_cidr" \
      iifname "$BRIDGE_NAME" oifname "$tgt" accept comment "\"Wi-Fi Auto Rule\"" 2>>"$LOG_FILE"; then
      msg_box "Error" "Failed to insert rule before jump (see $LOG_FILE)"
    fi
  else
    if ! nft add rule $FILTER_TABLE forward \
      ip saddr "$CIDR" ip daddr "$tgt_cidr" \
      iifname "$BRIDGE_NAME" oifname "$tgt" accept comment "\"Wi-Fi Auto Rule\"" 2>>"$LOG_FILE"; then
      msg_box "Error" "Failed to add forward rule without jump (see $LOG_FILE)"
    fi
  fi
fi

done

msg_box "Wi-Fi Ready" "Access point and VLAN bridge configured successfully."
